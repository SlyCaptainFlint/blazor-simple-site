@page "/photography"
@inject IJSRuntime JSRuntime;
@inject HttpClient Http
@inject MainContainerSizeProvider SizeProvider

@if (Photos == null || Photos.Count == 0)
{    
    <div class="loader-container">
        <div class="ui-loader"></div>
    </div>    
}
else
{
    <div class="gallery">
        @foreach(var photo in Photos)
        {
            <div class="clipped-border @photo.ImageCollapsedClass" style="width: @(PhotoWidth)px; height: @(PhotoWidth)px" @onclick="@(()=>SelectPhoto(@photo.Id))">
                <img class="@photo.ImageHiddenClass" src=@photo.Url_m @onload="@(()=>ShowPhoto(@photo.Id))" @onerror="@(()=>RemovePhoto(@photo.Id))"/>
            </div>
        }
    </div>   
}

<div id="photoShowcase" class="modal @ModalCssClass" @ontouchend:preventDefault @ontouchmove:preventDefault>
    <button class="gallery-navigate next" @onclick="ShowNextPhoto" title="next" @ontouchend:preventDefault @ontouchmove:preventDefault>
        <i class="fas fa-chevron-right"></i>
    </button>
    <button class="gallery-navigate previous" @onclick="ShowPreviousPhoto" title="next" @ontouchend:preventDefault @ontouchmove:preventDefault>
        <i class="fas fa-chevron-left"></i>
    </button>
    <div class="modal-background" @onclick="CloseModal" @ontouchend="CloseModal" @ontouchend:preventDefault @ontouchmove:preventDefault></div>
    <div class="modal-content is-clipped" @onclick="CloseModal" @ontouchend="CloseModal" @ontouchend:preventDefault @ontouchmove:preventDefault>
        <img class="@ShowcasePhotoCssClass" src=@ShowcasePhotoUrl alt="" @onload=ShowShowcasePhoto @onclick:stopPropagation @ontouchend:stopPropagation>
        <div class="loader-container @ShowcaseLoaderCssClass">
            <div class="ui-loader"></div>
        </div>
    </div>
    <button class="modal-close is-large" aria-label="close" @onclick="CloseModal" @ontouchend="CloseModal" @ontouchend:preventDefault @ontouchmove:preventDefault></button>
</div>

@code {
    private bool showModal = false;
    private string ModalCssClass => showModal ? "is-active" : null;
    private bool hideShowcasePhoto = true;
    private string ShowcasePhotoCssClass => hideShowcasePhoto ? "hidden": "";
    private string ShowcaseLoaderCssClass => hideShowcasePhoto ? "" : "hidden";
    private List<Photo> Photos = new List<Photo>();
    private float PhotoWidth { get; set; } = 0;
    private string ShowcasePhotoUrl { 
        get
        {
            var selectedPhoto = Photos.Find(x => x.Id == currentlySelectedPhotoId);
            return selectedPhoto?.Url_l ?? "";
        } 
    }
    private int currentlySelectedPhotoId { get; set; } = -1;
    private string PreviewPhotoBaseUrl { get; set; } = "https://ozinoveva.s3-us-west-2.amazonaws.com/medium/";    
    private string ShowcasePhotoBaseUrl { get; set; } = "https://ozinoveva.s3-us-west-2.amazonaws.com/large/";

    private void ShowNextPhoto()
    {
        if (currentlySelectedPhotoId != -1)
        {
            currentlySelectedPhotoId =  (currentlySelectedPhotoId + 1) % Photos.Count;
        }
    }

    private void ShowPreviousPhoto()
    {
        if(currentlySelectedPhotoId != -1)
        {
            // In this case, we need special handling for negative numbers, which don't yield a correct result for modular division
            var remainder = (currentlySelectedPhotoId - 1) % Photos.Count; 
            currentlySelectedPhotoId = remainder < 0 ? remainder + Photos.Count : remainder;
        }
    }

    private void CloseModal()
    {
        showModal = false;
        currentlySelectedPhotoId = -1;
        hideShowcasePhoto = true;

        JSRuntime.InvokeVoidAsync("turnOnBodyScrolling"); 
    }

    // Unhides showcase photo once it is loaded (this avoids partially loaded content from displaying)
    private void ShowShowcasePhoto()
    {
        hideShowcasePhoto = false;
    }

    private void SelectPhoto(int id)
    {
        currentlySelectedPhotoId = id;
        showModal = true;

        JSRuntime.InvokeVoidAsync("turnOffBodyScrolling"); 
    }

    // Unhides a photo in the gallery once it is loaded (this avoids partially loaded content from displaying)
    private void ShowPhoto(int id)
    {
        var selectedPhoto = Photos.Find(x => x.Id == id);
        selectedPhoto.ImageHidden = false;
    }

    // Hides containers for any photos that may not exist
    private void RemovePhoto(int id)
    {
        var selectedPhoto = Photos.Find(x => x.Id == id);
        Photos.Remove(Photos.Find(x => x.Id == id));
        //selectedPhoto.ImageCollapsed = true;
    }

    protected override void OnInitialized()
    {        
        for(var i = 0; i < 30; i++)
        {
            var photo = new Photo()  
            {
                Id = i,
                Url_l = $"{ShowcasePhotoBaseUrl}{i}.jpg",
                Url_m = $"{PreviewPhotoBaseUrl}{i}.jpg",
                ImageHidden = true
            };

            Photos.Add(photo);            
        }     
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Calculate width for each photo such that all available horizontal space gets used up          
            var minWidth = 300;
            var dimensions = await SizeProvider.GetDimensions();
            var containerWidth = dimensions.Width;        
            int photosInRow = containerWidth/minWidth;
            PhotoWidth = containerWidth/photosInRow;

            var videoFullSize = dimensions.Width > 660;
            JSRuntime.InvokeVoidAsync("playVideoIfNotStarted", videoFullSize);   
             
        }
    }
}
